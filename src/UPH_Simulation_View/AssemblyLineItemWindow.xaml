<Window x:Class="UPH_Simulation_View.AssemblyLineItemWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:s="clr-namespace:UPH_Simulation_View.Properties"
        xmlns:util="clr-namespace:UPH_Simulation_View.Util"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:UPH_Simulation_ViewModel;assembly=UPH_Simulation_ViewModel"
        xmlns:core="clr-namespace:System;assembly=mscorlib"
        xmlns:local="clr-namespace:UPH_Simulation_View"
        mc:Ignorable="d"
        Closing="CloseAssemblyLineItemWindow"
        Title="AssemblyLineItemWindow"
        Height="500" MinHeight="300" MaxHeight="800"
        MinWidth="600" MaxWidth="600"
        ResizeMode="CanResize">

    <Window.Resources>
        <ObjectDataProvider x:Key="PositionTypeEnum" MethodName="GetValues" ObjectType="{x:Type core:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="vm:PositionTypeVM"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <Style BasedOn="{StaticResource FlatButton}" x:Key="styleEditButton"  TargetType="Button">
            <Setter Property="IsEnabled" Value="{Binding RowIsSelected, UpdateSourceTrigger=PropertyChanged}" />
        </Style>
        <util:InvertableBooleanToVisibilityConverter x:Key="BoolToVis" />
    </Window.Resources>

    <DockPanel Name="spnAssemblyLineConfig">
        <Grid x:Name="grdName"
                  DockPanel.Dock="Top"
        		Height="30">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300"/>
                <ColumnDefinition Width="100"/>
                <ColumnDefinition Width="100"/>
                <ColumnDefinition Width="50"/>
            </Grid.ColumnDefinitions>
            <TextBox Grid.Column="0" x:Name="txtboxName" TextWrapping="Wrap"
                          Margin="10,10,10,0"
                         MaxLength="{Binding Source={x:Static s:Settings.Default}, Path=MaxStringLength}">
                <Binding Path="Name" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <util:StringCharacterValidationRule />
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
            <CheckBox Name="checkBoxAutostacker" Margin="10,10,10,0" Grid.Column="1" Content="Autostacker"
                      IsChecked="{Binding IsAutostacker, UpdateSourceTrigger=PropertyChanged}">
            </CheckBox>
            <Label Grid.Column="2" Margin="0,5,0,0" Content="Capacity" HorizontalAlignment="Right"></Label>
            <TextBox Grid.Column="3" x:Name="txtboxCapacity" TextWrapping="Wrap"
                          Margin="5,10,10,0"
                         MaxLength="{Binding Source={x:Static s:Settings.Default}, Path=MaxIntLength}"
                         IsEnabled="{Binding ElementName=checkBoxAutostacker, Path=IsChecked}">
                <Binding Path="Capacity" UpdateSourceTrigger="PropertyChanged">
                    <Binding.ValidationRules>
                        <util:IntRangeValidationRule Min="2" Max="99"/>
                    </Binding.ValidationRules>
                </Binding>
            </TextBox>
        </Grid>
        <Grid x:Name="grdButtons"
                  DockPanel.Dock="Top"
        		Height="60"
        		VerticalAlignment="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="30" />
                <ColumnDefinition Width="17" />
                <ColumnDefinition Width="30" />
                <ColumnDefinition Width="17" />
                <ColumnDefinition Width="30" />
                <ColumnDefinition Width="17" />
                <ColumnDefinition Width="30" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="1*" />
                <RowDefinition Height="30" />
                <RowDefinition Height="1*" />
            </Grid.RowDefinitions>
            <Button Grid.Column='1' Grid.Row="1"
                        Style="{StaticResource styleEditButton}"
                        Command="{Binding Commands.Up}">
                <Path Fill="Black" Data="M 0 6 L 12 6 L 6 0 Z"/>
            </Button>
            <Button Grid.Column='3' Grid.Row="1"
                        Style="{StaticResource styleEditButton}"
                        Command="{Binding Commands.Down}">
                <Path Fill="Black" Data="M 0 0 L 6 6 L 12 0 Z"/>
            </Button>
            <Button  Content="+" Grid.Column='5' Grid.Row="1" FontSize="18"
                         Style="{StaticResource FlatButton}"
                        Command="{Binding Commands.Add}"/>
            <Button Content="-" Grid.Column='7' Grid.Row="1" FontSize="18"
                        Style="{StaticResource styleEditButton}"
                        Command="{Binding Commands.Delete}"/>
        </Grid>
        
        <Grid x:Name="grdOk" Height="50"
                  DockPanel.Dock="Bottom">
            <Button x:Name="btnOk" Content="Ok" Margin="522,10,10,10"
                        Style="{StaticResource FlatButton}"
                        Command="{Binding OkCommand}"/>
        </Grid>
        <DataGrid
        		Margin="10,0,10,0"
                VerticalAlignment="Stretch"
        		x:Name="dgAssemblyItems"                
                ItemsSource="{Binding PositionVMs}"
        		CanUserAddRows="False"
        		RowHeight="25"
                SelectionMode="Single"
                CanUserSortColumns="False"
        		AutoGenerateColumns="False"
        		CanUserResizeColumns="False"
        		CanUserReorderColumns="False"
                SelectedItem="{Binding Row}"
        		HeadersVisibility="Column"  
                Background="White"
                BorderThickness="0"
                GridLinesVisibility="None">
            <DataGrid.Resources>
                <Style TargetType="DataGridCell">
                    <Setter Property="BorderThickness" Value="0"/>
                </Style>
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#1296DE"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="White"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#1296DE"/>
            </DataGrid.Resources>
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsTransferZone}" Value="False">
                            <Setter Property="Background" Value="#B0DCF4"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsTransferZone}" Value="True">
                            <Setter Property="Opacity" Value="0.8"/>
                            <Setter Property="FontSize" Value="12"/>
                            <Setter Property="Height" Value="20"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Columns>
                <DataGridTextColumn IsReadOnly="True" Header="Nr." Width="30" Binding="{Binding Number, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Name" Width="140">
                    <DataGridTextColumn.EditingElementStyle>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="MaxLength" Value="{Binding Source={x:Static s:Settings.Default}, Path=MaxStringLength}"/>
                        </Style>
                    </DataGridTextColumn.EditingElementStyle>
                    <DataGridTextColumn.Binding>
                        <Binding Path="Name" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <util:MinStringLengthValidationRule  Min="1"/>
                                <util:StringCharacterValidationRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>
                <DataGridComboBoxColumn  Header="Type" Width="100"
                                             ItemsSource="{Binding Source={StaticResource PositionTypeEnum}}"
                                             SelectedItemBinding="{Binding Type, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Time" Width="45">
                    <DataGridTextColumn.Binding>
                        <Binding Path="Time" StringFormat="N2">
                            <Binding.ValidationRules>
                                <util:DoubleRangeValidationRule  Min="0.1" Max="999.0"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Lazytime" Width="60">
                    <DataGridTextColumn.Binding>
                        <Binding Path="LazyTime" StringFormat="N2">
                            <Binding.ValidationRules>
                                <util:DoubleRangeValidationRule  Min="0.1" Max="999.0"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </DataGridTextColumn.Binding>
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="IsEnabled" Value="{Binding IsDualZone}" />
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Operation" Width="*">
                    <DataGridTextColumn.Binding>
                        <Binding Path="Operation" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <util:MinStringLengthValidationRule  Min="1"/>
                                <util:StringCharacterValidationRule />
                            </Binding.ValidationRules>
                        </Binding>
                    </DataGridTextColumn.Binding>
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="IsEnabled" Value="{Binding IsDualZone}" />
                        </Style>
                    </DataGridTextColumn.CellStyle>
                    <DataGridTextColumn.EditingElementStyle>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="MaxLength" Value="{Binding Source={x:Static s:Settings.Default}, Path=MaxStringLength}"/>
                        </Style>
                    </DataGridTextColumn.EditingElementStyle>
                </DataGridTextColumn>
            </DataGrid.Columns>
            <DataGrid.InputBindings>
                <KeyBinding Key="Delete" Command="{Binding Commands.Delete}" />
            </DataGrid.InputBindings>
        </DataGrid>
    </DockPanel>
</Window>
    